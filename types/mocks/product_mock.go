// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/zechao158/ecomm/storage"
	"github.com/zechao158/ecomm/types"
	"sync"
)

// Ensure, that MockProductRepository does implement types.ProductRepository.
// If this is not the case, regenerate this file with moq.
var _ types.ProductRepository = &MockProductRepository{}

// MockProductRepository is a mock implementation of types.ProductRepository.
//
//	func TestSomethingThatUsesProductRepository(t *testing.T) {
//
//		// make and configure a mocked types.ProductRepository
//		mockedProductRepository := &MockProductRepository{
//			CreateFunc: func(contextMoqParam context.Context, product *types.Product) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(contextMoqParam context.Context, product *types.Product) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(contextMoqParam context.Context, sQLModifier storage.SQLModifier) ([]types.Product, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByFieldsFunc: func(ctx context.Context, fields map[string]string, forUpdate bool) (*types.Product, error) {
//				panic("mock out the GetByFields method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID, forUpdate bool) (*types.Product, error) {
//				panic("mock out the GetByID method")
//			},
//			GetProductsByIDsFunc: func(contextMoqParam context.Context, uUIDs []uuid.UUID) ([]types.Product, error) {
//				panic("mock out the GetProductsByIDs method")
//			},
//			UpdateFunc: func(contextMoqParam context.Context, product *types.Product) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedProductRepository in code that requires types.ProductRepository
//		// and then make assertions.
//
//	}
type MockProductRepository struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, product *types.Product) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(contextMoqParam context.Context, product *types.Product) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(contextMoqParam context.Context, sQLModifier storage.SQLModifier) ([]types.Product, error)

	// GetByFieldsFunc mocks the GetByFields method.
	GetByFieldsFunc func(ctx context.Context, fields map[string]string, forUpdate bool) (*types.Product, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID, forUpdate bool) (*types.Product, error)

	// GetProductsByIDsFunc mocks the GetProductsByIDs method.
	GetProductsByIDsFunc func(contextMoqParam context.Context, uUIDs []uuid.UUID) ([]types.Product, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, product *types.Product) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Product is the product argument value.
			Product *types.Product
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Product is the product argument value.
			Product *types.Product
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SQLModifier is the sQLModifier argument value.
			SQLModifier storage.SQLModifier
		}
		// GetByFields holds details about calls to the GetByFields method.
		GetByFields []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fields is the fields argument value.
			Fields map[string]string
			// ForUpdate is the forUpdate argument value.
			ForUpdate bool
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// ForUpdate is the forUpdate argument value.
			ForUpdate bool
		}
		// GetProductsByIDs holds details about calls to the GetProductsByIDs method.
		GetProductsByIDs []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UUIDs is the uUIDs argument value.
			UUIDs []uuid.UUID
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Product is the product argument value.
			Product *types.Product
		}
	}
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockGetAll           sync.RWMutex
	lockGetByFields      sync.RWMutex
	lockGetByID          sync.RWMutex
	lockGetProductsByIDs sync.RWMutex
	lockUpdate           sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MockProductRepository) Create(contextMoqParam context.Context, product *types.Product) error {
	if mock.CreateFunc == nil {
		panic("MockProductRepository.CreateFunc: method is nil but ProductRepository.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}{
		ContextMoqParam: contextMoqParam,
		Product:         product,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, product)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedProductRepository.CreateCalls())
func (mock *MockProductRepository) CreateCalls() []struct {
	ContextMoqParam context.Context
	Product         *types.Product
} {
	var calls []struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MockProductRepository) Delete(contextMoqParam context.Context, product *types.Product) error {
	if mock.DeleteFunc == nil {
		panic("MockProductRepository.DeleteFunc: method is nil but ProductRepository.Delete was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}{
		ContextMoqParam: contextMoqParam,
		Product:         product,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(contextMoqParam, product)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedProductRepository.DeleteCalls())
func (mock *MockProductRepository) DeleteCalls() []struct {
	ContextMoqParam context.Context
	Product         *types.Product
} {
	var calls []struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *MockProductRepository) GetAll(contextMoqParam context.Context, sQLModifier storage.SQLModifier) ([]types.Product, error) {
	if mock.GetAllFunc == nil {
		panic("MockProductRepository.GetAllFunc: method is nil but ProductRepository.GetAll was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		SQLModifier     storage.SQLModifier
	}{
		ContextMoqParam: contextMoqParam,
		SQLModifier:     sQLModifier,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(contextMoqParam, sQLModifier)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedProductRepository.GetAllCalls())
func (mock *MockProductRepository) GetAllCalls() []struct {
	ContextMoqParam context.Context
	SQLModifier     storage.SQLModifier
} {
	var calls []struct {
		ContextMoqParam context.Context
		SQLModifier     storage.SQLModifier
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByFields calls GetByFieldsFunc.
func (mock *MockProductRepository) GetByFields(ctx context.Context, fields map[string]string, forUpdate bool) (*types.Product, error) {
	if mock.GetByFieldsFunc == nil {
		panic("MockProductRepository.GetByFieldsFunc: method is nil but ProductRepository.GetByFields was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Fields    map[string]string
		ForUpdate bool
	}{
		Ctx:       ctx,
		Fields:    fields,
		ForUpdate: forUpdate,
	}
	mock.lockGetByFields.Lock()
	mock.calls.GetByFields = append(mock.calls.GetByFields, callInfo)
	mock.lockGetByFields.Unlock()
	return mock.GetByFieldsFunc(ctx, fields, forUpdate)
}

// GetByFieldsCalls gets all the calls that were made to GetByFields.
// Check the length with:
//
//	len(mockedProductRepository.GetByFieldsCalls())
func (mock *MockProductRepository) GetByFieldsCalls() []struct {
	Ctx       context.Context
	Fields    map[string]string
	ForUpdate bool
} {
	var calls []struct {
		Ctx       context.Context
		Fields    map[string]string
		ForUpdate bool
	}
	mock.lockGetByFields.RLock()
	calls = mock.calls.GetByFields
	mock.lockGetByFields.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *MockProductRepository) GetByID(ctx context.Context, id uuid.UUID, forUpdate bool) (*types.Product, error) {
	if mock.GetByIDFunc == nil {
		panic("MockProductRepository.GetByIDFunc: method is nil but ProductRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        uuid.UUID
		ForUpdate bool
	}{
		Ctx:       ctx,
		ID:        id,
		ForUpdate: forUpdate,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id, forUpdate)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedProductRepository.GetByIDCalls())
func (mock *MockProductRepository) GetByIDCalls() []struct {
	Ctx       context.Context
	ID        uuid.UUID
	ForUpdate bool
} {
	var calls []struct {
		Ctx       context.Context
		ID        uuid.UUID
		ForUpdate bool
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetProductsByIDs calls GetProductsByIDsFunc.
func (mock *MockProductRepository) GetProductsByIDs(contextMoqParam context.Context, uUIDs []uuid.UUID) ([]types.Product, error) {
	if mock.GetProductsByIDsFunc == nil {
		panic("MockProductRepository.GetProductsByIDsFunc: method is nil but ProductRepository.GetProductsByIDs was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UUIDs           []uuid.UUID
	}{
		ContextMoqParam: contextMoqParam,
		UUIDs:           uUIDs,
	}
	mock.lockGetProductsByIDs.Lock()
	mock.calls.GetProductsByIDs = append(mock.calls.GetProductsByIDs, callInfo)
	mock.lockGetProductsByIDs.Unlock()
	return mock.GetProductsByIDsFunc(contextMoqParam, uUIDs)
}

// GetProductsByIDsCalls gets all the calls that were made to GetProductsByIDs.
// Check the length with:
//
//	len(mockedProductRepository.GetProductsByIDsCalls())
func (mock *MockProductRepository) GetProductsByIDsCalls() []struct {
	ContextMoqParam context.Context
	UUIDs           []uuid.UUID
} {
	var calls []struct {
		ContextMoqParam context.Context
		UUIDs           []uuid.UUID
	}
	mock.lockGetProductsByIDs.RLock()
	calls = mock.calls.GetProductsByIDs
	mock.lockGetProductsByIDs.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MockProductRepository) Update(contextMoqParam context.Context, product *types.Product) error {
	if mock.UpdateFunc == nil {
		panic("MockProductRepository.UpdateFunc: method is nil but ProductRepository.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}{
		ContextMoqParam: contextMoqParam,
		Product:         product,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, product)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedProductRepository.UpdateCalls())
func (mock *MockProductRepository) UpdateCalls() []struct {
	ContextMoqParam context.Context
	Product         *types.Product
} {
	var calls []struct {
		ContextMoqParam context.Context
		Product         *types.Product
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
