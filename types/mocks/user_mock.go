// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/zechao158/ecomm/types"
	"sync"
)

// Ensure, that MockUserRepository does implement types.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ types.UserRepository = &MockUserRepository{}

// MockUserRepository is a mock implementation of types.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked types.UserRepository
//		mockedUserRepository := &MockUserRepository{
//			CreateUserFunc: func(ctx context.Context, user *types.User) error {
//				panic("mock out the CreateUser method")
//			},
//			GetUserByEmailFunc: func(ctx context.Context, email string) (*types.User, error) {
//				panic("mock out the GetUserByEmail method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires types.UserRepository
//		// and then make assertions.
//
//	}
type MockUserRepository struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user *types.User) error

	// GetUserByEmailFunc mocks the GetUserByEmail method.
	GetUserByEmailFunc func(ctx context.Context, email string) (*types.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *types.User
		}
		// GetUserByEmail holds details about calls to the GetUserByEmail method.
		GetUserByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
	}
	lockCreateUser     sync.RWMutex
	lockGetUserByEmail sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *MockUserRepository) CreateUser(ctx context.Context, user *types.User) error {
	if mock.CreateUserFunc == nil {
		panic("MockUserRepository.CreateUserFunc: method is nil but UserRepository.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *types.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRepository.CreateUserCalls())
func (mock *MockUserRepository) CreateUserCalls() []struct {
	Ctx  context.Context
	User *types.User
} {
	var calls []struct {
		Ctx  context.Context
		User *types.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetUserByEmail calls GetUserByEmailFunc.
func (mock *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*types.User, error) {
	if mock.GetUserByEmailFunc == nil {
		panic("MockUserRepository.GetUserByEmailFunc: method is nil but UserRepository.GetUserByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetUserByEmail.Lock()
	mock.calls.GetUserByEmail = append(mock.calls.GetUserByEmail, callInfo)
	mock.lockGetUserByEmail.Unlock()
	return mock.GetUserByEmailFunc(ctx, email)
}

// GetUserByEmailCalls gets all the calls that were made to GetUserByEmail.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByEmailCalls())
func (mock *MockUserRepository) GetUserByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetUserByEmail.RLock()
	calls = mock.calls.GetUserByEmail
	mock.lockGetUserByEmail.RUnlock()
	return calls
}
